/*
    Kalman Filter

    2017 Jason Hunt - nulluser@gmail.com
*/

#include <stdio.h>
#include <stdlib.h>

#include "Kalman.h"

#include "System.h"



// Constructor, Parameters via initializer list
Kalman1D::Kalman1D()
{
    R = 0;
    x = 0.0;
    P = 1.0;
    Q = 0; // Process Noise
}

    // Apply new sample and compute
    double Kalman1D::setSample(double z)
    {

        bool s = 0;

        if (s)alert("Sample Update %f\n", z);

        double y, S;

       /* // Update Estimate Error for system noise
        P = P + Q;
        if (s)alert("P %f ", P);

        // Current Error
        y = z - x;
        if (s)alert("Y %f ", y);

        // Innovation covariance
        S = P + R;
        if (s)alert("S %f ", S);

        // Compute Kalman Gain
        K = P / S;
        if (s)alert("K %f ", K);

        // Update estimate
        x = x + K * y;
        if (s)alert("X %f ", x);

        // Update estimate error
        P = (1 - K) * P +R;
        if (s)alert("P %f\n", P);*/




//    # time update
    //xhatminus[k] = xhat[k-1]
    //Pminus[k] = P[k-1]+Q

    P = P + Q;

  //  # measurement update
    //K[k] = Pminus[k]/( Pminus[k]+R )
    K = P /(P+R);



    y = z - x;


    //xhat[k] = xhatminus[k]+K[k]*(z[k]-xhatminus[k])


    x = x + K*(z-x);

    //P[k] = (1-K[k])*Pminus[k]

    P = (1-K) * P ;


    double a = 0.999;


    R = a * R + (1-a)*(y*y + P);




if (s)alert("R %f\n", R);










        return x;
    }


    // Apply new sample and compute

    void Kalman1D::setMeasurementNoise(double v)
    {
        R = v;
    }

    void Kalman1D::setProcessNoise(double v)
    {
        Q = v;
    }

    double Kalman1D::getEstimate(void)
    {
        return x;
    }

    double Kalman1D::getEstimateError(void)
    {
        return P;
    }

    double Kalman1D::getGain(void)
    {
        return K;
    }


// Return random in [0..1]
double Rand(double min, double max)
{
    return (rand() / (double) RAND_MAX) * (max - min) + min;
}


// Test Kalman Filter
void KalmanTest( void )
{
	const unsigned int  Samples         = 100;       // Number of samples for test
    const double        Actual          = -0.37727;      // Example actual value
    const double        MeaError        = 0.5;     // Measurement Error

    printf("Kalman Filter Test\n");

    Kalman1D kalman;

    kalman.setMeasurementNoise(0.01); // R
    kalman.setProcessNoise(0.00001);  // Q


    double Estimate = 0.0;
    double rms = 0;
    for (unsigned int i = 0; i < Samples; i++)
    {
        // Simulate measurement
        double M = Actual + Rand(-MeaError / 2.0, MeaError / 2.0);


        // Sample
        Estimate = kalman.setSample(M);

        // Estimate Error Percentage
        double EstError  = 100 * (Estimate - Actual) / Actual;

        rms += (Estimate - Actual) * (Estimate - Actual);


        alert("%d,%f,%f\n", i, M, Estimate);

        printf("Sam: %4d "
               "Act: %4.3f "
               "Meas: %4.3f "
               "Est: %4.3f "
               "Err: %+5.2f%% "
                "K: %5.3f "
                "P: %5.3f "

                "\n",
               i, Actual, M, Estimate, EstError, kalman.getGain(), kalman.getEstimateError());
    }

    rms = sqrt(rms / Samples);


    double FinalError = 100.0 * (Estimate - Actual) / Actual;

    printf("Final Kalman Error: %8.2f%%  RMS:  %4.2f", FinalError, rms*100);



}





/*


# Kalman filter example demo in Python

# A Python implementation of the example given in pages 11-15 of "An
# Introduction to the Kalman Filter" by Greg Welch and Gary Bishop,
# University of North Carolina at Chapel Hill, Department of Computer
# Science, TR 95-041,
# http://www.cs.unc.edu/~welch/kalman/kalmanIntro.html

# by Andrew D. Straw

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (10, 8)

# intial parameters
n_iter = 50
sz = (n_iter,) # size of array
x = -0.37727 # truth value (typo in example at top of p. 13 calls this z)
z = np.random.normal(x,0.1,size=sz) # observations (normal about x, sigma=0.1)

Q = 1e-5 # process variance

# allocate space for arrays
xhat=np.zeros(sz)      # a posteri estimate of x
P=np.zeros(sz)         # a posteri error estimate
xhatminus=np.zeros(sz) # a priori estimate of x
Pminus=np.zeros(sz)    # a priori error estimate
K=np.zeros(sz)         # gain or blending factor

R = 0.1**2 # estimate of measurement variance, change to see effect

# intial guesses
xhat[0] = 0.0
P[0] = 1.0

for k in range(1,n_iter):
    # time update
    xhatminus[k] = xhat[k-1]
    Pminus[k] = P[k-1]+Q

    # measurement update
    K[k] = Pminus[k]/( Pminus[k]+R )
    xhat[k] = xhatminus[k]+K[k]*(z[k]-xhatminus[k])
    P[k] = (1-K[k])*Pminus[k]

plt.figure()
plt.plot(z,'k+',label='noisy measurements')
plt.plot(xhat,'b-',label='a posteri estimate')
plt.axhline(x,color='g',label='truth value')
plt.legend()
plt.title('Estimate vs. iteration step', fontweight='bold')
plt.xlabel('Iteration')
plt.ylabel('Voltage')

plt.figure()
valid_iter = range(1,n_iter) # Pminus not valid at step 0
plt.plot(valid_iter,Pminus[valid_iter],label='a priori error estimate')
plt.title('Estimated $\it{\mathbf{a \ priori}}$ error vs. iteration step', fontweight='bold')
plt.xlabel('Iteration')
plt.ylabel('$(Voltage)^2$')
plt.setp(plt.gca(),'ylim',[0,.01])
plt.show()


*/
